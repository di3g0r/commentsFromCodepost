Line 17: Don't forget to catch the case where `arr.length == 0`! Right now, if I let `arr = []`, your code produces an `IndexOutofBounds` error when trying to access `arr[0]`.
Line 21: This logic is correct, but it requires you to create a new arrays of sizes `n-1, n-2, ..., 1` (where n is the length of the original array). You can get around this by creating a helper function and passing the index of the 'new' array to it.
Line 33: Nice use of the `if...else` pattern to encode mutually exclusive logic.
Line 44: The same concept applies here as in my comment above. Instead of creating a new array, you can create a helper function that takes as argument a `lower` and `upper` bound.
